name: Testnet Deployment

on:
  push:
    branches: [ testnet ]
  pull_request:
    branches: [ testnet ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache for Turbo
        uses: rharkor/caching-for-turbo@v1.5

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build applications
        run: pnpm turbo run build
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
          # Add all environment variables from .env file here
          ROOT_URL: ${{ secrets.ROOT_URL }}
          SWAP_URL: ${{ secrets.SWAP_URL }}
          EARN_URL: ${{ secrets.EARN_URL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push root app
      - name: Build and push root image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ghcr.io/hbulldozer/dozer/root-app-testnet:latest
          target: root-runner
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push swap app
      - name: Build and push swap image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ghcr.io/hbulldozer/dozer/swap-app-testnet:latest
          target: swap-runner
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push earn app
      - name: Build and push earn image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ghcr.io/hbulldozer/dozer/earn-app-testnet:latest
          target: earn-runner
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VM
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
        run: |
          # Create SSH key
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan $VM_HOST >> ~/.ssh/known_hosts

          # Copy configuration files
          scp -i ~/.ssh/deploy_key docker-compose.prod.yml $VM_USERNAME@$VM_HOST:/home/$VM_USERNAME/docker-compose.yml
          scp -i ~/.ssh/deploy_key nginx.conf $VM_USERNAME@$VM_HOST:/home/$VM_USERNAME/nginx.conf
          scp -i ~/.ssh/deploy_key .env $VM_USERNAME@$VM_HOST:/home/$VM_USERNAME/.env

          ssh -i ~/.ssh/deploy_key $VM_USERNAME@$VM_HOST "
            # Login to registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest images
            docker pull ghcr.io/hbulldozer/dozer/root-app-testnet:latest
            docker pull ghcr.io/hbulldozer/dozer/swap-app-testnet:latest
            docker pull ghcr.io/hbulldozer/dozer/earn-app-testnet:latest

            # Restart containers
            docker compose down
            docker compose up -d
          "