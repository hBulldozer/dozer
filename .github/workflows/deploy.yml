name: Testnet Deployment

on:
  push:
    branches: [ testnet ]
  pull_request:
    branches: [ testnet ]

env:
  REGISTRY: ghcr.io
  DEPLOY_ENV: testnet

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Handle Docker image names (CI/CD variables)
      - name: Set Docker image names
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          {
            echo "REPO_NAME=$REPO_LC"
            echo "ROOT_IMAGE=${{ env.REGISTRY }}/$REPO_LC/root-app-testnet"
            echo "SWAP_IMAGE=${{ env.REGISTRY }}/$REPO_LC/swap-app-testnet"
            echo "EARN_IMAGE=${{ env.REGISTRY }}/$REPO_LC/earn-app-testnet"
          } >> $GITHUB_ENV

      # Handle application .env file (your app's environment variables)
      - name: Create .env file
        run: |
          # Create fresh .env file
          echo "${{ secrets.ENV_FILE }}" > .env
          
          # Debug: Print first line count
          echo "Created .env file with $(wc -l < .env) lines"
          
          # Ensure no Windows line endings
          sed -i 's/\r$//' .env
          
          # Debug: Verify file permissions
          ls -la .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build root app with fixed secrets format
      - name: Build and push Root app
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          target: root-runner
          tags: ${{ env.ROOT_IMAGE }}:${{ github.sha }},${{ env.ROOT_IMAGE }}:latest
          build-args: |
            NEXT_PUBLIC_ENV=${{ env.DEPLOY_ENV }}
          secret-files: env=.env
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: true

      # Build swap app with fixed secrets format
      - name: Build and push Swap app
        uses: docker/build-push-action@v5
        env:
          DOCKER_BUILDKIT: 1
        with:
          context: .
          push: true
          target: swap-runner
          tags: ${{ env.SWAP_IMAGE }}:${{ github.sha }},${{ env.SWAP_IMAGE }}:latest
          secret-files: env=.env
          build-args: |
            NEXT_PUBLIC_ENV=${{ env.DEPLOY_ENV }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: true

      # Build earn app with fixed secrets format
      - name: Build and push Earn app
        uses: docker/build-push-action@v5
        env:
          DOCKER_BUILDKIT: 1
        with:
          context: .
          push: true
          target: earn-runner
          tags: ${{ env.EARN_IMAGE }}:${{ github.sha }},${{ env.EARN_IMAGE }}:latest
          secret-files: env=.env
          build-args: |
            NEXT_PUBLIC_ENV=${{ env.DEPLOY_ENV }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: true

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: testnet
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set repository name to lowercase
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_NAME=$REPO_LC" >> $GITHUB_ENV
          echo "ROOT_IMAGE=${{ env.REGISTRY }}/$REPO_LC/root-app-testnet" >> $GITHUB_ENV
          echo "SWAP_IMAGE=${{ env.REGISTRY }}/$REPO_LC/swap-app-testnet" >> $GITHUB_ENV
          echo "EARN_IMAGE=${{ env.REGISTRY }}/$REPO_LC/earn-app-testnet" >> $GITHUB_ENV

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Copy docker-compose file
        run: |
          scp -i ~/.ssh/deploy_key docker-compose.prod.yml ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/home/${{ secrets.VM_USERNAME }}/docker-compose.yml
          scp -i ~/.ssh/deploy_key nginx.conf ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/home/${{ secrets.VM_USERNAME }}/nginx.conf

      - name: Deploy to VM
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            docker pull ${{ env.ROOT_IMAGE }}:latest
            docker pull ${{ env.SWAP_IMAGE }}:latest
            docker pull ${{ env.EARN_IMAGE }}:latest

            docker-compose down
            docker-compose up -d
          "

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/deploy_key