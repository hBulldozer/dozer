name: Testnet Deployment

on:
  push:
    branches: [ testnet ]
  pull_request:
    branches: [ testnet ]

env:
  REGISTRY: ghcr.io
  DEPLOY_ENV: testnet

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup pnpm with specific version
      - uses: pnpm/action-setup@v2
        with:
          version: 8

      # Setup Node.js
      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Docker layer caching with monorepo consideration
      - name: Generate Docker cache key
        id: docker-cache
        run: |
          # Create a hash of all files that affect the Docker build
          find . -type f \( \
            -name "Dockerfile" -o \
            -name "docker-compose*.yml" -o \
            -name ".dockerignore" -o \
            -path "./.github/workflows/*" -o \
            -name "package.json" -o \
            -name "pnpm-lock.yaml" -o \
            -name "pnpm-workspace.yaml" -o \
            -path "./packages/*/package.json" -o \
            -path "./apps/*/package.json" -o \
            -path "./config/*/package.json" \
          \) -exec sha256sum {} \; | sort > docker-hash.txt
          
          echo "hash=$(sha256sum docker-hash.txt | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      # Cache Docker layers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:latest

      - name: Docker Layer Caching
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.docker-cache.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set Docker image names
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          {
            echo "REPO_NAME=$REPO_LC"
            echo "ROOT_IMAGE=${{ env.REGISTRY }}/$REPO_LC/root-app-testnet"
            echo "SWAP_IMAGE=${{ env.REGISTRY }}/$REPO_LC/swap-app-testnet"
            echo "EARN_IMAGE=${{ env.REGISTRY }}/$REPO_LC/earn-app-testnet"
          } >> $GITHUB_ENV

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.ROOT_IMAGE }}:${{ github.sha }}
            ${{ env.ROOT_IMAGE }}:latest
            ${{ env.SWAP_IMAGE }}:${{ github.sha }}
            ${{ env.SWAP_IMAGE }}:latest
            ${{ env.EARN_IMAGE }}:${{ github.sha }}
            ${{ env.EARN_IMAGE }}:latest
          secret-files: |
            env=.env
          build-args: |
            NEXT_PUBLIC_ENV=${{ env.DEPLOY_ENV }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          target: builder

      # Temp fix for growing cache size
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: testnet
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set repository name to lowercase
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_NAME=$REPO_LC" >> $GITHUB_ENV
          echo "ROOT_IMAGE=${{ env.REGISTRY }}/$REPO_LC/root-app-testnet" >> $GITHUB_ENV
          echo "SWAP_IMAGE=${{ env.REGISTRY }}/$REPO_LC/swap-app-testnet" >> $GITHUB_ENV
          echo "EARN_IMAGE=${{ env.REGISTRY }}/$REPO_LC/earn-app-testnet" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Copy configuration files
        run: |
          # Create a temporary env file for docker-compose
          echo "ROOT_IMAGE=${{ env.ROOT_IMAGE }}" > docker.env
          echo "SWAP_IMAGE=${{ env.SWAP_IMAGE }}" >> docker.env
          echo "EARN_IMAGE=${{ env.EARN_IMAGE }}" >> docker.env
          
          # Copy all necessary files
          scp -i ~/.ssh/deploy_key docker-compose.prod.yml ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/home/${{ secrets.VM_USERNAME }}/docker-compose.yml
          scp -i ~/.ssh/deploy_key nginx.conf ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/home/${{ secrets.VM_USERNAME }}/nginx.conf
          scp -i ~/.ssh/deploy_key .env ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/home/${{ secrets.VM_USERNAME }}/.env
          scp -i ~/.ssh/deploy_key docker.env ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/home/${{ secrets.VM_USERNAME }}/.env.docker

      - name: Deploy to VM
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Export image variables for docker-compose
            export ROOT_IMAGE=${{ env.ROOT_IMAGE }}
            export SWAP_IMAGE=${{ env.SWAP_IMAGE }}
            export EARN_IMAGE=${{ env.EARN_IMAGE }}

            # Pull images
            docker pull ${{ env.ROOT_IMAGE }}:latest
            docker pull ${{ env.SWAP_IMAGE }}:latest
            docker pull ${{ env.EARN_IMAGE }}:latest

            # Run docker-compose with both env files
            docker compose --env-file .env.docker down
            docker compose --env-file .env.docker up -d
          "

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/deploy_key